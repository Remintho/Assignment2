/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Files.ScaleImage;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class AdminPage extends javax.swing.JFrame {
    Files.AdminPage adminPage = new Files.AdminPage();
    Files.Report report = new Files.Report();
    LocalDate todaysDate = LocalDate.now();
    SimpleDateFormat format;
    DateFormat  dateFormat ;
    ScaleImage sImage = new ScaleImage();
    /**
     * Creates new form adminPage
     */
    public AdminPage() {
        initComponents();
        profileImage();
    }

    private void profileImage(){
        String imagePath = "/image/login.png";
        profileLabel.setIcon(sImage.scaledImage(profileLabel, imagePath));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        selectedUserField = new javax.swing.JTextField();
        logOut = new javax.swing.JButton();
        profileLabel = new javax.swing.JLabel();
        addUserButton = new javax.swing.JButton();
        reserveButton = new javax.swing.JButton();
        expandButton = new javax.swing.JButton();
        roomManag = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableField = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        editUpdate = new javax.swing.JButton();
        returnLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        OutTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        overallLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        paidLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nPaidLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        INTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        nameBTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        nameTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("selected user");

        selectedUserField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectedUserFieldFocusGained(evt);
            }
        });

        logOut.setText("LogOut");
        logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutActionPerformed(evt);
            }
        });

        addUserButton.setText("New User");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        reserveButton.setText("Reserve");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        expandButton.setText("User-Info");
        expandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandButtonActionPerformed(evt);
            }
        });

        roomManag.setText("Room-Manag");
        roomManag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomManagActionPerformed(evt);
            }
        });

        historyButton.setText("User Reservation");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search  BY");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "User-ID", "First Name", "Last Name", "Email", "Ph-Number" }));

        tableField.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "User-ID", "First Name", "Last Name", "Age", "Email", "Phone "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFieldMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableField);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        editUpdate.setText("Edit");
        editUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomManag, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addUserButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reserveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(historyButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectedUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(profileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(logOut, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(returnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(245, 245, 245))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(selectedUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(addUserButton))
                            .addComponent(profileLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reserveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expandButton)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(logOut)
                        .addGap(15, 15, 15)))
                .addComponent(roomManag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(returnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", jPanel1);

        reportTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "King", "Queen", "Single", "Double", "Triple", "Quad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(reportTable);

        OutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room-Number", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(OutTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Todays Check-In");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Todays Check-Out");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("Revenue Report");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Overall Revenue ");

        overallLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel7.setText("Total  Payed  ");

        paidLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel9.setText("Total NotPayed ");

        nPaidLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        INTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room-Number", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(INTable);

        nameBTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "user-ID", "Full-Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(nameBTable);

        nameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "user-ID", "Full-Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(nameTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(overallLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(nPaidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(paidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nPaidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overallLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Daily report", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        CreateUser newUser = new CreateUser();
        newUser.setVisible(true);
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        int userID = 0;
        try{
            userID = Integer.parseInt(selectedUserField.getText());
            }catch(NumberFormatException ex){}
        AddReservePage reserveRoom = new AddReservePage();
        reserveRoom.getUserID(userID);
        reserveRoom.setVisible(true);
    }//GEN-LAST:event_reserveButtonActionPerformed

    private void logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutActionPerformed
        LoginPage page = new LoginPage();
        page.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)tableField.getModel();
        tblModel.setRowCount(0);
        
        ResultSet rs = adminPage.searchBy(searchBox.getSelectedIndex(), searchField.getText());
        if(rs == null || "".equalsIgnoreCase(rs.toString())){
            returnLabel.setText("Invalid Input or Input is not available");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        
        else{
            try {
                while(rs.next()){
                    String userID = Integer.toString(rs.getInt("USERID"));
                    String FName = rs.getString("FNAME");
                    String LName = rs.getString("LNAME");
                    String age = Integer.toString(rs.getInt("AGE"));
                    String email = rs.getString("EMAIL");
                    String phone = rs.getString("PHONE");

                    String custData[] = new String[]{userID, FName, LName, age, email, phone};
                    tblModel.addRow(custData);
                    returnLabel.setText("");
                } 
                
            } catch (SQLException ex) {
                Logger.getLogger(ReservationPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)tableField.getModel();
        String userID = "";
        String fName = "";
        String lName = "";
        String age = "";
        String email = "";
        String phone = "";
        for(int i=0; i<tableField.getRowCount(); i++){
            userID = (String) tblModel.getValueAt(i, 0);
            fName = (String) tblModel.getValueAt(i, 1);
            lName = (String) tblModel.getValueAt(i, 2);
            age = (String) tblModel.getValueAt(i, 3);
            email = (String) tblModel.getValueAt(i, 4);
            phone = (String) tblModel.getValueAt(i, 5);
        }
        if(userID==null || userID.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/values to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else if(fName==null || fName.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/value to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else if(lName==null || lName.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/value to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else if(age==null || age.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/value to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else if(email==null || email.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/value to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else if(phone==null || phone.equalsIgnoreCase("") ){
            returnLabel.setText("There is no data/value to be updated");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else{
            adminPage.dataChange(userID, fName, lName, age, email, phone);
        }
        
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void editUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUpdateActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel)tableField.getModel();
        int row = tableField.getSelectedRow();
        int column = tableField.getSelectedColumn();
      
        switch (tableField.getSelectedColumn()) {
            case 0:
                returnLabel.setText("You can not edit the User-ID");
                returnLabel.setForeground(Color.red);
                returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
                break;
            case 1:
                String fName = JOptionPane.showInputDialog("Input First Name");
                if(fName != null){
                    tblModel.setValueAt(fName, row, column);
                }
                else{}
                tableField.clearSelection();
                break;
            case 2:
                String lName = JOptionPane.showInputDialog("Input Last Name");
                if(lName != null){
                    tblModel.setValueAt(lName, row, column);
                }
                else{}
                tableField.clearSelection();
                break;
            case 3:
                String age = JOptionPane.showInputDialog("Input Age");
                if(age != null){
                    tblModel.setValueAt(age, row, column);
                }
                else{}
                tableField.clearSelection();
                break;
            case 4:
                String email = JOptionPane.showInputDialog("Input Email Address");
                if(email != null){
                    tblModel.setValueAt(email, row, column);
                }
                else{}
                tableField.clearSelection();
                break;
            case 5:
                String phone = JOptionPane.showInputDialog("Input Phone Number");
                if(phone != null){
                    tblModel.setValueAt(phone, row, column);
                }
                else{}
                tableField.clearSelection();
                break;
            default:
                break;
        }
 
    }//GEN-LAST:event_editUpdateActionPerformed

    private void tableFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFieldMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel)tableField.getModel();
        selectedUserField.setText((String) tblModel.getValueAt(tableField.getSelectedRow(), 0));
    }//GEN-LAST:event_tableFieldMouseClicked

    private void selectedUserFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectedUserFieldFocusGained
        selectedUserField.setEditable(false);
    }//GEN-LAST:event_selectedUserFieldFocusGained

    private void roomManagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomManagActionPerformed
        RoomManag roomManage = new RoomManag();
        roomManage.setVisible(true);
    }//GEN-LAST:event_roomManagActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(tableField.getSelectedRow()==-1 || tableField.getValueAt(tableField.getSelectedRow(), 0) == null || "".equals(tableField.getValueAt(tableField.getSelectedRow(), 0))){
            returnLabel.setText("There is no data/vale selected");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        
        else{
            int reply = JOptionPane.showConfirmDialog(null, "are you sure, you want to delete selected row. All data will be lost and cant be retrieved", "confirm", JOptionPane.YES_NO_OPTION);
            if(reply == JOptionPane.YES_OPTION){
                adminPage.deleteRecord(tableField.getValueAt(tableField.getSelectedRow(), 0).toString());
                DefaultTableModel tblModel = (DefaultTableModel)tableField.getModel();
                tblModel.setRowCount(0);
            }  
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        selectedUserField.setCaretColor(Color.WHITE);
        ArrayList<Integer> inList = new ArrayList<>();

        //This is check in report table 
        DefaultTableModel InModel = (DefaultTableModel)INTable.getModel();
        DefaultTableModel nameModel = (DefaultTableModel)nameTable.getModel();
        ResultSet INrs = report.getTodaysCheckin(todaysDate.toString());
            try {
                
                while(INrs.next()){
                    String userID = Integer.toString(INrs.getInt("USERID"));
                    String roomNumber = Integer.toString(INrs.getInt("ROOM_NUMBER"));
                    String amount = Integer.toString(INrs.getInt("AMOUNT"));
                    String status = INrs.getString("PAYMENT_STATUES");
                    String custData[] = new String[]{roomNumber, amount, status};
                    InModel.addRow(custData);
                    int userid = Integer.parseInt(userID);
                    inList.add(userid);
                } 
                for(int user_Id : inList){
                    ResultSet nameRs = report.getFullName(user_Id);
                    while(nameRs.next()){
                        String FName = nameRs.getString("FNAME");
                        String LName = nameRs.getString("LNAME");

                        String fullName = FName+" "+LName;
                        String userID = Integer.toString(user_Id);
                        String custData[] = new String[]{userID, fullName};
                        nameModel.addRow(custData);
                    } 
                }
            } catch (SQLException ex) {
                Logger.getLogger(ReservationPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        //ends here
        
        
        //This is checkout report table
        ArrayList<Integer> OutList = new ArrayList<>();
        DefaultTableModel OutModel = (DefaultTableModel)OutTable.getModel();
        DefaultTableModel nameBModel = (DefaultTableModel)nameBTable.getModel();
        ResultSet Outrs = report.getTodaysCheckin(todaysDate.toString());
            try {
                
                while(Outrs.next()){
                    String userID = Integer.toString(Outrs.getInt("USERID"));
                    String roomNumber = Integer.toString(Outrs.getInt("ROOM_NUMBER"));
                    String amount = Integer.toString(Outrs.getInt("AMOUNT"));
                    String status = Outrs.getString("PAYMENT_STATUES");
                    String custData[] = new String[]{roomNumber, amount, status};
                    OutModel.addRow(custData);
                    int userid = Integer.parseInt(userID);
                    OutList.add(userid);
                } 
                for(int user_Id : OutList){
                    ResultSet nameRs = report.getFullName(user_Id);
                    while(nameRs.next()){
                        String FName = nameRs.getString("FNAME");
                        String LName = nameRs.getString("LNAME");

                        String fullName = FName+" "+LName;
                        String userID = Integer.toString(user_Id);
                        String custData[] = new String[]{userID, fullName};
                        nameBModel.addRow(custData);
                    } 
                }
            } catch (SQLException ex) {
                Logger.getLogger(ReservationPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        //end here
        
        
        //This is report table
        DefaultTableModel reportModel = (DefaultTableModel)reportTable.getModel();
        String King = Integer.toString(report.getRevenue(report.getRooms("KING")));
        String Queen = Integer.toString(report.getRevenue(report.getRooms("QUEEN")));
        String Single = Integer.toString(report.getRevenue(report.getRooms("SINGLE")));
        String Double = Integer.toString(report.getRevenue(report.getRooms("DOUBLE")));
        String triple = Integer.toString(report.getRevenue(report.getRooms("TRIPLE")));
        String Quad = Integer.toString(report.getRevenue(report.getRooms("QUAD")));

        String custData[] = new String[]{King, Queen, Single, Double, triple, Quad};
        reportModel.addRow(custData);
        //ends here 
        
        int totalPaid =report.Paid("payed");
        int totalNPaid =report.notPaid("notpayed");
        int overall = totalNPaid+totalPaid;
        paidLabel.setText("$ "+Integer.toString(totalPaid));
        nPaidLabel.setText("$ "+Integer.toString(totalNPaid));
        overallLabel.setText("$ "+Integer.toString(overall));
  
    }//GEN-LAST:event_formWindowOpened

    private void expandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandButtonActionPerformed
       if(selectedUserField.getText()==null || "".equalsIgnoreCase(selectedUserField.getText())){
            returnLabel.setText("There is no data/value selected");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else{
            int userID = 0;
            try{
                userID = Integer.parseInt(selectedUserField.getText());
            }catch(NumberFormatException ex){
            }
            ProfilePage proPage = new ProfilePage();
            proPage.getID(userID);
            proPage.setVisible(true);
        }
    }//GEN-LAST:event_expandButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
       if(selectedUserField.getText()==null || "".equalsIgnoreCase(selectedUserField.getText())){
            returnLabel.setText("There is no data/value selected");
            returnLabel.setForeground(Color.red);
            returnLabel.setHorizontalAlignment(SwingConstants.CENTER);
        }
        else{
            int userID = 0;
            try{
                userID = Integer.parseInt(selectedUserField.getText());
            }catch(NumberFormatException ex){
            }
            HistoryPage hp = new HistoryPage();
            hp.getID(userID);
            hp.setVisible(true);
        }
    }//GEN-LAST:event_historyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable INTable;
    private javax.swing.JTable OutTable;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editUpdate;
    private javax.swing.JButton expandButton;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logOut;
    private javax.swing.JLabel nPaidLabel;
    private javax.swing.JTable nameBTable;
    private javax.swing.JTable nameTable;
    private javax.swing.JLabel overallLabel;
    private javax.swing.JLabel paidLabel;
    private javax.swing.JLabel profileLabel;
    private javax.swing.JTable reportTable;
    private javax.swing.JButton reserveButton;
    private javax.swing.JLabel returnLabel;
    private javax.swing.JButton roomManag;
    private javax.swing.JComboBox<String> searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField selectedUserField;
    private javax.swing.JTable tableField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
